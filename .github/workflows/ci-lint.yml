name: LINT
on:
  pull_request:
    paths-ignore:
      - "docs/**"
  push:
    paths-ignore:
      - "docs/**"
    branches:
      - master

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUST_BACKTRACE: short
  RUSTFLAGS: "-Dwarnings -Dnonstandard-style -Drust-2018-idioms -Dunused -Wrust-2021-compatibility"
  RUSTUP_MAX_RETRIES: 10

jobs:
  cleanup-runs:
    if: "!startsWith(github.ref, 'refs/tags/') && github.ref != 'refs/heads/master'"
    runs-on: ubuntu-latest
    steps:
      - uses: rokroskar/workflow-run-cleanup-action@master
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

  fmt:
    strategy:
      matrix:
        os: [ubuntu-lates]
        toolchain: [stable]

    name: Fmt
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2

      - name: Cache toolchain
        uses: actions/cache@v2
        with:
          path: |
            ~/.rustup/settings.toml
            ~/.rustup/toolchains/${{ matrix.toolchain }}-*
            ~/.rustup/update-hashes/${{ matrix.toolchain }}-*
          key: rust-toolchain_${{ matrix.os }}-${{ matrix.toolchain }}

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.toolchain }}
          components: cargo, rustfmt
          override: true

      - name: Run fmt check
        run: cargo fmt --all -- --check

  # This job creates the "clippy-results" GitHub Action that lists the clippy results in a nice format.
  clippy:
    strategy:
      matrix:
        os: [ubuntu-lates]
        toolchain: [stable]

    name: Clippy
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2

      - name: Cache toolchain
        uses: actions/cache@v2
        with:
          path: |
            ~/.rustup/settings.toml
            ~/.rustup/toolchains/${{ matrix.toolchain }}-*
            ~/.rustup/update-hashes/${{ matrix.toolchain }}-*
          key: rust-toolchain_${{ matrix.os }}-${{ matrix.toolchain }}

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.toolchain }}
          components: cargo, clippy
          override: true

      - uses: actions-rs/clippy-check@v1
        with:
          name: clippy
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features --all-targets

  clippy-tools:
    strategy:
      matrix:
        os: [ubuntu-lates]
        toolchain: [stable]

    name: Clippy Tools
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2

      - name: Cache toolchain
        uses: actions/cache@v2
        with:
          path: |
            ~/.rustup/settings.toml
            ~/.rustup/toolchains/${{ matrix.toolchain }}-*
            ~/.rustup/update-hashes/${{ matrix.toolchain }}-*
          key: rust-toolchain_${{ matrix.os }}-${{ matrix.toolchain }}

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.toolchain }}
          components: cargo, clippy
          override: true

      - uses: actions-rs/clippy-check@v1
        with:
          name: clippy-tools
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --manifest-path tools/kvstore-test/Cargo.toml --all-features --all-targets

  docs:
    strategy:
      matrix:
        os: [ubuntu-lates]
        toolchain: [nightly]

    name: Docs
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2

      - name: Cache toolchain
        uses: actions/cache@v2
        with:
          path: |
            ~/.rustup/settings.toml
            ~/.rustup/toolchains/${{ matrix.toolchain }}-*
            ~/.rustup/update-hashes/${{ matrix.toolchain }}-*
          key: rust-toolchain_${{ matrix.os }}-${{ matrix.toolchain }}

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.toolchain }}
          components: cargo, clippy
          override: true

      - uses: actions-rs/cargo@v1
        env:
          RUSTDOCFLAGS: "--cfg docsrs"
        with:
          command: doc
          args: --all-features

  nightly-coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly-2021-03-25
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: test-all-features
        env:
          RUSTFLAGS: '-Zinstrument-coverage'
          LLVM_PROFILE_FILE: '%p-%m.profraw'
      - name: Install grcov
        run: |
          rustup component add llvm-tools-preview
          curl -L https://github.com/mozilla/grcov/releases/download/v0.8.0/grcov-linux-x86_64.tar.bz2 | tar jxf -
      - name: Run grcov
        run: |
          ./grcov . --source-dir . --binary-path ./target/debug/ --output-type lcov --output-path ./lcov.info --branch --ignore-not-existing
      - name: Upload to Codecov
        run: |
          bash <(curl -s https://codecov.io/bash) -f ./lcov.info
